#!/bin/bash
# nkn-node-dashboard.sh
# –û–±–µ–¥–∏–Ω–µ–Ω TUI Dashboard –∑–∞ NKN Node

# –ü—ä—Ç–∏—â–∞
NKN_PATH="/home/nopeace/nkn/cmd/nknc/nknc"
WALLET_PATH="/home/nopeace/nkn/cmd/nknc/wallet.json"
NODE_SERVICE="nkn-node"

# –õ–æ–∫–∞–ª–µ–Ω RPC –Ω–∞ nknd (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ)
RPC_URL="http://127.0.0.1:30003"

# –¶–≤–µ—Ç–æ–≤–µ
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

# ‚îÄ‚îÄ‚îÄ –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç wallet.json (–±–µ–∑ –ø–∞—Ä–æ–ª–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WALLET_ADDR=""
if [[ -f "$WALLET_PATH" ]]; then
  # –ü—Ä–æ–±–≤–∞–º–µ –∏ —Å .Address, –∏ —Å .address (–∑–∞–≤–∏—Å–∏ –æ—Ç –≤–µ—Ä—Å–∏—è—Ç–∞)
  WALLET_ADDR=$(jq -r '.Address // .address // empty' "$WALLET_PATH" 2>/dev/null)
fi

# ‚îÄ‚îÄ‚îÄ –•–µ–ª–ø—ä—Ä: —á–µ—Ç–µ–Ω–µ –Ω–∞ –±–∞–ª–∞–Ω—Å–∞ (RPC ‚Üí fallback –∫—ä–º nknc) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
get_wallet_balance() {
  local addr="$1"
  local bal=""

  # 1) –ü—Ä–µ–∑ RPC (curl + getbalancebyaddr) ‚Äì –Ω–µ –∏–∑–∏—Å–∫–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω wallet
  if command -v curl >/dev/null 2>&1 && [[ -n "$addr" ]]; then
    bal=$(curl -s -H "Content-Type: application/json" \
      -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getbalancebyaddr\",\"params\":{\"address\":\"$addr\"}}" \
      "$RPC_URL" | jq -r '.result.amount // .result.balance // empty' 2>/dev/null)
  fi

  # 2) Fallback –ø—Ä–µ–∑ nknc (–Ω—è–∫–æ–∏ —Å–±–æ—Ä–∫–∏ –≤—Ä—ä—â–∞—Ç JSON, –¥—Ä—É–≥–∏ ‚Äì –æ–±–∏–∫–Ω–æ–≤–µ–Ω —Ç–µ–∫—Å—Ç)
  if [[ -z "$bal" || "$bal" == "null" ]]; then
    if [[ -x "$NKN_PATH" && -n "$addr" ]]; then
      local out
      out=$("$NKN_PATH" wallet -l balance -a "$addr" 2>/dev/null)
      # –û–ø–∏—Ç –∑–∞ JSON parse
      bal=$(echo "$out" | jq -r '.result.amount // .result.balance // empty' 2>/dev/null)
      # –ê–∫–æ –ø–∞–∫ –µ –ø—Ä–∞–∑–Ω–æ, –∏–∑—Ç–µ–≥–ª—è–º–µ –ø—ä—Ä–≤–æ—Ç–æ —á–∏—Å–ª–æ –æ—Ç —Ç–µ–∫—Å—Ç–∞
      if [[ -z "$bal" || "$bal" == "null" ]]; then
        bal=$(echo "$out" | grep -Eo '[0-9]+([.][0-9]+)?' | head -n1)
      fi
    fi
  fi

  echo "$bal"
}

# Log Activity Stats –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏
declare -A patterns=(
  ["Commit block"]="Commit block"
  ["Receive block proposal"]="Receive block proposal"
  ["Accept block"]="Accept block"
  ["Generate mining reward"]="Generate mining reward"
  ["RelayService"]="RelayService"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
declare -A counters
declare -A last_seen
for key in "${!patterns[@]}"; do
  counters["$key"]=0
  last_seen["$key"]=$(date +%s)
done

THRESHOLD=$((10 * 60))  # 10 –º–∏–Ω—É—Ç–∏ –∑–∞—Å—Ç–æ–π

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–µ—á–∞—Ç –Ω–∞ Log Stats
print_log_stats() {
  echo "----------------------------"
  echo "üìä Log Activity Stats"
  echo "----------------------------"
  now=$(date +%s)
  for key in "${!patterns[@]}"; do
    elapsed=$(( now - last_seen["$key"] ))
    if [[ $elapsed -gt $THRESHOLD ]]; then
      color=$RED
    else
      color=$GREEN
    fi
    printf "%-25s : ${color}%d${RESET}\n" "$key" "${counters[$key]}"
  done
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞ Health Check
print_health() {
  echo "=============================="
  echo "üîç NKN Node Health Check"
  echo "=============================="

  # Sync State
  sync=$($NKN_PATH info -s 2>/dev/null | jq -r .result.syncState)
  if [[ "$sync" == "PERSIST_FINISHED" ]]; then
    echo -e "Sync State       : ${GREEN}$sync${RESET}"
  else
    echo -e "Sync State       : ${RED}${sync:-N/A}${RESET}"
  fi

  # Relay Messages (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ —Å—ä—Å –∑–∞–ø–µ—Ç–∞—è –∑–∞ —Ö–∏–ª—è–¥–Ω–∏)
  relay=$($NKN_PATH info -s 2>/dev/null | jq -r .result.relayMessageCount)
  relay_fmt=$(echo "$relay" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
  if [[ "$relay" =~ ^[0-9]+$ && "$relay" -gt 0 ]]; then
    echo -e "Relay Messages   : ${GREEN}${relay_fmt}${RESET}"
  else
    echo -e "Relay Messages   : ${RED}0${RESET}"
  fi

  # Uptime
  uptime_sec=$($NKN_PATH info -s 2>/dev/null | jq -r .result.uptime)
  days=$(( uptime_sec / 86400 ))
  hours=$(( (uptime_sec % 86400) / 3600 ))
  minutes=$(( (uptime_sec % 3600) / 60 ))
  seconds=$(( uptime_sec % 60 ))
  echo -e "Uptime           : ${YELLOW}${days}d ${hours}h ${minutes}m ${seconds}s${RESET}"

  # Wallet Balance (–±–µ–∑ –¥–∞ –ø–∏–ø–∞–º–µ –æ—Å—Ç–∞–Ω–∞–ª–æ—Ç–æ)
  balance=""
  if [[ -n "$WALLET_ADDR" ]]; then
    balance=$(get_wallet_balance "$WALLET_ADDR")
  fi

  if [[ -z "$balance" || "$balance" == "null" ]]; then
    echo -e "Wallet Balance   : ${RED}N/A${RESET}"
  else
    echo -e "Wallet Balance   : ${GREEN}${balance} NKN${RESET}"
  fi
}

# –°–ª–µ–¥–µ–Ω–µ –Ω–∞ –ª–æ–≥–æ–≤–µ –∏ –µ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—á–∞—Ç
journalctl -u $NODE_SERVICE -f -n0 --no-pager | while read -r line; do
  updated=0
  for key in "${!patterns[@]}"; do
    if [[ "$line" == *"${patterns[$key]}"* ]]; then
      counters["$key"]=$(( counters["$key"] + 1 ))
      last_seen["$key"]=$(date +%s)
      updated=1
    fi
  done

  if [[ $updated -eq 1 ]]; then
    clear
    print_health
    print_log_stats
    echo "=============================="
    echo "–û–±–Ω–æ–≤–µ–Ω–æ: $(date)"
  fi
done
